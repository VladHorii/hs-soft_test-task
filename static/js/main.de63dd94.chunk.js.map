{"version":3,"sources":["api/continentQuery.js","contexts/ItemsContext.js","utils/fakeData/index.js","components/ListItem/ListItem.jsx","App.js","api/client.js","index.js"],"names":["LIST_CONTINENTS","gql","ItemsContext","createContext","ItemsProvider","children","useState","activeNode","setActiveNode","Provider","value","getGenerateData","values","arr","i","push","name","nanoid","ListItem","item","level","fakeDataValues","useContext","activeElementWithThisLevel","find","el","isDisplayChildren","length","type","onClick","generateData","isLastElement","prevState","newState","forEach","map","handleOnElementClick","App","list","setList","data","fakeData","setFakeData","setFakeDataValues","useQuery","onCompleted","normalizedData","continents","continent","countries","country","languages","language","getNormalizedData","onSubmit","e","preventDefault","n","Number","target","m","autoComplete","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.de63dd94.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const LIST_CONTINENTS = gql`\r\n  {\r\n    continents {\r\n      name\r\n      countries {\r\n        name\r\n        languages {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { createContext, useState } from \"react\";\r\n\r\nexport const ItemsContext = createContext([]);\r\n\r\nexport const ItemsProvider = ({ children }) => {\r\n  const [activeNode, setActiveNode] = useState([]);\r\n\r\n  return (\r\n    <ItemsContext.Provider value={{ activeNode, setActiveNode }}>\r\n      {children}\r\n    </ItemsContext.Provider>\r\n  );\r\n};\r\n","import { nanoid } from \"nanoid\";\r\n\r\nexport function getGenerateData(values) {\r\n  const arr = [];\r\n  for (let i = 0; i < values; i++) {\r\n    arr.push({ name: nanoid(10), children: [] });\r\n  }\r\n  return arr;\r\n}\r\n","import { useContext } from \"react\";\r\nimport { ItemsContext } from \"../../contexts/ItemsContext\";\r\nimport { getGenerateData } from \"../../utils/fakeData\";\r\n\r\nfunction ListItem({ item, level, fakeDataValues = null }) {\r\n  const { activeNode, setActiveNode } = useContext(ItemsContext);\r\n\r\n  const activeElementWithThisLevel = activeNode?.find(\r\n    (el) => el.level === level\r\n  );\r\n\r\n  const isDisplayChildren =\r\n    item.children?.length > 0 && activeElementWithThisLevel?.name === item.name;\r\n\r\n  const handleOnElementClick = (name) => {\r\n    // Generated data\r\n    if (\r\n      fakeDataValues !== null &&\r\n      level < fakeDataValues[1] &&\r\n      item.children?.length === 0\r\n    ) {\r\n      const generateData = getGenerateData(fakeDataValues[0]);\r\n      item.children.push(...generateData);\r\n    }\r\n\r\n    const isLastElement = !item.children?.length;\r\n\r\n    if (activeElementWithThisLevel?.name === name && !isLastElement) {\r\n      setActiveNode((prevState) => {\r\n        const newState = [];\r\n        prevState.forEach((el) => {\r\n          if (el.level < level) {\r\n            newState.push(el);\r\n          }\r\n        });\r\n        return newState;\r\n      });\r\n    }\r\n    if (activeElementWithThisLevel?.name !== name) {\r\n      setActiveNode((prevState) => {\r\n        if (isLastElement) {\r\n          return [];\r\n        } else if (prevState.length && activeElementWithThisLevel) {\r\n          const newState = prevState.map((el) => {\r\n            if (el.level === level) {\r\n              el.name = name;\r\n            }\r\n            return el;\r\n          });\r\n\r\n          return newState;\r\n        } else if (!activeElementWithThisLevel) {\r\n          return [...prevState, { level, name }];\r\n        } else {\r\n          return [{ level, name }];\r\n        }\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <li key={item.name}>\r\n        <button type=\"button\" onClick={() => handleOnElementClick(item.name)}>\r\n          {item.name}\r\n        </button>\r\n\r\n        {isDisplayChildren && (\r\n          <ul>\r\n            {item.children.map((children) => {\r\n              return (\r\n                <ListItem\r\n                  key={children.name}\r\n                  item={children}\r\n                  level={level + 1}\r\n                  fakeDataValues={fakeDataValues}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </li>\r\n    </>\r\n  );\r\n}\r\nexport default ListItem;\r\n","import { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { LIST_CONTINENTS } from \"./api/continentQuery\";\n\nimport ListItem from \"./components/ListItem\";\nimport { getGenerateData } from \"./utils/fakeData\";\n\nfunction App() {\n  const [list, setList] = useState({});\n  const [fakeData, setFakeData] = useState({ data: [] });\n  const [fakeDataValues, setFakeDataValues] = useState(null);\n\n  useQuery(LIST_CONTINENTS, {\n    onCompleted: handleOnCompliteGetData,\n  });\n\n  const getNormalizedData = (data) => {\n    const normalizedData = data.continents.map((continent) => {\n      const countries = continent.countries.map((country) => {\n        const languages = country.languages.map((language) => ({\n          name: language.name,\n        }));\n        return { name: country.name, children: languages };\n      });\n      return { name: continent.name, children: countries };\n    });\n    return normalizedData;\n  };\n\n  function handleOnCompliteGetData(data) {\n    const normalizedData = getNormalizedData(data);\n    setList({\n      data: [...normalizedData],\n    });\n  }\n\n  const generateData = (e) => {\n    e.preventDefault();\n    const n = Number(e.target.n.value);\n    const m = Number(e.target.m.value);\n    setFakeDataValues([m, n]);\n\n    const generateData = getGenerateData(m);\n    const data = { data: [...generateData] };\n    setFakeData(data);\n  };\n  return (\n    <>\n      <h2>Countries API</h2>\n      <ul>\n        {list?.data?.map((el) => (\n          <ListItem item={el} key={el.name} level={1} />\n        ))}\n      </ul>\n      <form onSubmit={generateData} autoComplete=\"off\">\n        <h2>Random data</h2>\n        <div>\n          <label>\n            <input name=\"n\" />\n            depth of JSON tree\n          </label>\n        </div>\n        <div>\n          <label>\n            <input name=\"m\" />\n            number of children in each node\n          </label>\n        </div>\n        <button type=\"submit\">Generate</button>\n      </form>\n      {fakeData.data.length > 0 && (\n        <ul>\n          {fakeData?.data?.map((el) => (\n            <ListItem\n              item={el}\n              key={el.name}\n              level={1}\n              fakeDataValues={fakeDataValues}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  uri: \"https://countries.trevorblades.com/\",\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { client } from \"./api/client\";\nimport { ItemsProvider } from \"./contexts/ItemsContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <ItemsProvider>\n        <App />\n      </ItemsProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}